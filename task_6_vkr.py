from gensim.models import Word2Vec
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

database = {
    "правильное питание": "организация режима и рациона питания, обеспечивающая организм всеми необходимыми питательными веществами в оптимальных количествах и соотношениях для поддержания здоровья, работоспособности и профилактики заболеваний.",
    "здоровый образ жизни": "комплексное поведение и привычки, направленные на поддержание и улучшение физического, психического и социального благополучия, включая рациональное питание, физическую активность, отказ от вредных привычек и соблюдение режима дня.",
    "нормированный распорядок дня": "планирование и распределение времени суток, включающее периоды работы, отдыха, сна, приёма пищи и физической активности, с целью оптимизации работоспособности и общего самочувствия.",
    "ментальное здоровье": "состояние психического благополучия, при котором человек способен реализовывать свои способности, справляться с жизненными трудностями, эффективно работать и вносить вклад в общественную жизнь.",
    "физическая активность": "любые движения тела, выполняемые скелетными мышцами, которые требуют расхода энергии и включают разнообразные виды активности, такие как ходьба, бег, плавание и упражнения.",
    "физкультурное образование": "процесс обучения и воспитания, направленный на формирование знаний, умений и навыков в области физической культуры, развитие физических качеств и воспитание устойчивой потребности в здоровом образе жизни.",
    "мониторинг здоровья": "регулярное наблюдение за состоянием организма с использованием медицинских, технологических и самоконтрольных методов для своевременного выявления изменений, профилактики и лечения заболеваний.",
    "двигательная активность": "любые целенаправленные или спонтанные движения, выполняемые человеком в течение дня, которые способствуют укреплению здоровья, повышению выносливости и работоспособности.",
    "спортивная информатика": "научная и прикладная дисциплина, изучающая методы и средства использования информационных технологий и систем в области спорта для анализа, планирования и оптимизации тренировочного процесса и соревнований.",
    "спортивные технологии": "совокупность методов, устройств, программного обеспечения и оборудования, применяемых для улучшения спортивных достижений, анализа данных, предотвращения травм и повышения качества тренировок и соревнований."
}

model = Word2Vec.load("models/model_vkr.model")

def vector_num(query):
    query = query.lower()
    words = query.split()
    # print(words)
    word_vectors = []
    average_vector = []

    for word in words:
        if model.wv.has_index_for(word):
            word_vectors.append(model.wv.get_vector(word))

    # print(word_vectors)
    if len(word_vectors) > 0:
        average_vector = np.mean(word_vectors, axis=0)
    return average_vector


def directory_query(query):
    average_vector = vector_num(query)

    closest_key = None
    closest_similar = -1
    similar = -1

    for key, description in database.items():
        key_vector = vector_num(key)
        if (len(key_vector) > 0) & (len(average_vector) > 0):
            similar = cosine_similarity([average_vector],[key_vector])[0][0]
        if similar > closest_similar:
            closest_similar = similar
            closest_key = key

        description_vector = vector_num(description)
        if (len(description_vector) > 0) & (len(average_vector) > 0):
            similar = cosine_similarity([average_vector],[description_vector])[0][0]
        if similar > closest_similar:
            closest_similar = similar
            closest_key = key

    if closest_key is not None:
        print("Описание:", database[closest_key])
    else:
        print("Описание не найдено.")

user_query = input("Введите ваш запрос: ")
directory_query(user_query)